name: CI - Build All Platforms
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      mode:
        description: 'check OR release (platform)'
        required: true
        default: 'check'
permissions: 
  contents: write
jobs:
#-----------------------------------------------------------------------
# Unit Tests
#-----------------------------------------------------------------------
  # unitTests:
  #   name: Run Unit Tests for Unity version ${{ matrix.unityVersion }}
  #   runs-on: ubuntu-latest
  #   strategy: 
  #     fail-fast: false
  #     matrix:
  #       unityVersion: 
  #         - 2020.3.15f2
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - name : Cache Library
  #       uses: actions/cache@v3
  #       with:
  #         path: Library
  #         key: Library          
  #     - name: Run Unit Tests
  #       uses: game-ci/unity-test-runner@main
  #       id: tests
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #       with:
  #         unityVersion: ${{ matrix.unityVersion }}
  #         artifactsPath: ${{ matrix.unityVersion }}-artifacts
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}
  #         checkName: ${{ matrix.unityVersion }} Test Results
  #     - name: Upload Test Results
  #       uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: Test results for ${{ matrix.unityVersion }}
  #         path: ${{ steps.tests.outputs.artifactsPath }}
      # - name: Write to Changelog
      #   if: github.event.action == 'published'
      #   env:
      #     RELEASE_NOTES: ${{ github.event.release.body }}
      #   run: echo "$RELEASE_NOTES" > fastlane/metadata/android/en-US/changelogs/default.txt
      # - name: Auto-Commit Changelog
      #   if: github.event.action == 'published'
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     branch: master
      #     file_pattern: fastlane/metadata/android/en-US/changelogs/*
      #     commit_message: Update Changelog

#-----------------------------------------------------------------------
# Build Project (with Linux)
#-----------------------------------------------------------------------
  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    # needs: unitTests
    strategy: 
      fail-fast: false
      matrix:
        unityVersion: 
          - 2020.3.15f2
        targetPlatform: 
          # TODO: Learn how to include JUST the platform from the dispatch
          # - Android # Build an Android apk standalone app
          # - iOS # Build an iOS Player
          - StandaloneWindows # build a Windows Standalone
          # - StandaloneWindows64 # build a Windows 64-bit Standalone
          - StandaloneOSX # build a MacOS Standalone (Intel 64-bit)
          - StandaloneLinux64 # build a Linux 64-bit Standalone 
          - WebGL # WebGL        
    steps:
      - name: Free Disk Space for Android
        if: matrix.targetPlatform == 'Android'
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - name: Build Unity Project
        uses: game-ci/unity-builder@v2.0-alpha-10
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ matrix.targetPlatform }}
          versioning: Semantic
      - name: Upload Build
        uses: actions/upload-artifact@v3
        if: github.event.action == 'published' || contains(github.event.inputs.mode, 'release')
        with:
          name: build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
      - name: Zip build/${{ matrix.targetPlatform }}
        uses: montudor/action-zip@v1
        if: (github.event.action == 'published' || contains(github.event.inputs.mode, 'release')) # && matrix.targetPlatform != 'Android' && matrix.targetPlatform != 'iOS' && matrix.targetPlatform != 'StandaloneOSX'
        with:
          args: zip -qq -r build/build-${{ matrix.targetPlatform }}.zip build/${{ matrix.targetPlatform }}
      - name: Upload build-${{ matrix.targetPlatform }}.zip to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: (github.event.action == 'published' || contains(github.event.inputs.mode, 'release')) # && matrix.targetPlatform != 'Android' && matrix.targetPlatform != 'iOS' && matrix.targetPlatform != 'StandaloneOSX'
        with:
          repo_token: ${{ secrets.GH_CREDENTIALS }}
          asset_name: build-${{ matrix.targetPlatform }}.zip
          file: build/build-${{ matrix.targetPlatform }}.zip
          tag: ${{ github.ref }}
          overwrite: true
          body:  ${{ github.event.release.body }}

#-----------------------------------------------------------------------
# Build Project (with Windows)
#-----------------------------------------------------------------------

  # buildWithWindows:
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: windows-latest
  #   needs: unitTests
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - StandaloneWindows # build a Windows Standalone
  #         - StandaloneWindows64 # build a Windows 64-bit Standalone
  #         - WSAPlayer
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         lfs: true
  #     - name: Get Version
  #       id: versioning
  #       uses: paulhatch/semantic-version@v4.0.2
  #       with:
  #         format: "${major}.${minor}.${patch}"
  #     - name: Setup Unity IL2CPP
  #       uses: kuler90/setup-unity@v1
  #       with:
  #         unity-modules: windows-il2cpp
  #     - name: Setup Unity UWP
  #       uses: kuler90/setup-unity@v1
  #       if: matrix.targetPlatform == 'WSAPlayer'
  #       with:
  #         unity-modules: universal-windows-platform
  #     - name: Activate Unity
  #       uses: kuler90/activate-unity@v1
  #       with:
  #         unity-username: ${{ secrets.UNITY_EMAIL }}
  #         unity-password: ${{ secrets.UNITY_PASSWORD }}          
  #     - name: Build Unity
  #       uses: kuler90/build-unity@v1
  #       with:
  #         build-path: build/${{ matrix.targetPlatform }}
  #         build-target: ${{ matrix.targetPlatform }}
  #         # build-method: Cgs.Editor.BuildCgs.BuildOptions
  #         build-version: ${{ steps.versioning.outputs.version }}
  #     - name: Upload Build
  #       uses: actions/upload-artifact@v3
  #       if: github.event.action == 'published' || contains(github.event.inputs.mode, 'release')
  #       with:
  #         name: build-${{ matrix.targetPlatform }}
  #         path: build/${{ matrix.targetPlatform }}
  #     - name: Zip build/${{ matrix.targetPlatform }}
  #       uses: papeloto/action-zip@v1
  #       if: github.event.action == 'published' && matrix.targetPlatform != 'WSAPlayer'
  #       with:
  #         files: build/${{ matrix.targetPlatform }}/
  #         dest: build/build-${{ matrix.targetPlatform }}.zip
  #     - name: Upload build-${{ matrix.targetPlatform }}.zip to GitHub Release
  #       uses: svenstaro/upload-release-action@v2
  #       if: github.event.action == 'published' && matrix.targetPlatform != 'WSAPlayer'
  #       with:
  #         repo_token: ${{ secrets.GH_CREDENTIALS }}
  #         asset_name: build-${{ matrix.targetPlatform }}.zip
  #         file: build/build-${{ matrix.targetPlatform }}.zip
  #         tag: ${{ github.ref }}
  #         overwrite: true
  #         body: ${{ github.event.release.body }}

  #-----------------------------------------------------------------------
  # Deploy to GitHub Pages
  #-----------------------------------------------------------------------

  releaseToGitHubPages:
    name: Release to GitHub Pages
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'Web')) 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Download WebGL Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-WebGL
          path: build/WebGL
      - name: Deploy to GitHub Pages ðŸš€
        uses: JamesIves/github-pages-deploy-action@4.1.3
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/WebGL # The folder the action should deploy.
          target-folder: build # The folder the action should be deployed to within the deployment branch

  #-----------------------------------------------------------------------
  # Deploy to itch.io
  #-----------------------------------------------------------------------

  release_webgl_to_itch:
    name: Release WebGL to itch.io
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'Web'))
    steps:
      - name: download WEBGL
        id: download-webgl
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: "latest"
          file: build-WebGL.zip
          token: "${{ secrets.GH_CREDENTIALS }}"
      - name: deploy to itch.io (WEBGL)
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: html
          ITCH_GAME: space-shooter-pro-redux
          ITCH_USER: Arynoyn
          PACKAGE: build-WebGL.zip
          VERSION: ${{ steps.download-webgl.outputs.version }}          

  release_windows_to_itch:
    name: Release Windows (32-Bit) to itch.io
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'Windows'))
    steps:
      - name: download Windows
        id: download-windows
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: "latest"
          file: build-StandaloneWindows.zip
          token: "${{ secrets.GH_CREDENTIALS }}"
      - name: deploy to itch.io (Windows)
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: windows
          ITCH_GAME: space-shooter-pro-redux
          ITCH_USER: Arynoyn
          PACKAGE: build-StandaloneWindows.zip
          VERSION: ${{ steps.download-windows.outputs.version }}

  # release_windows_64_to_itch:
  #   name: Release Windows (64-Bit) to itch.io
  #   runs-on: ubuntu-latest
  #   needs: buildWithLinux
  #   if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'Windows'))
  #   steps:
  #     - name: download Windows
  #       id: download-windows-64
  #       uses: dsaltares/fetch-gh-release-asset@master
  #       with:
  #         version: "latest"
  #         file: build-StandaloneWindows64.zip
  #         token: "${{ secrets.GH_CREDENTIALS }}"
  #     - name: deploy to itch.io (Windows)
  #       uses: josephbmanley/butler-publish-itchio-action@master
  #       env:
  #         BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
  #         CHANNEL: windows
  #         ITCH_GAME: space-shooter-pro-redux
  #         ITCH_USER: Arynoyn
  #         PACKAGE: build-StandaloneWindows64.zip
  #         VERSION: ${{ steps.download-windows-64.outputs.version }}

  release_macos_to_itch:
    name: Release Mac OSX to itch.io
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'Mac'))
    steps:
      - name: download MacOS
        id: download-macos
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: "latest"
          file: build-StandaloneOSX.zip
          token: "${{ secrets.GH_CREDENTIALS }}"
      - name: deploy to itch.io (MacOS)
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: mac
          ITCH_GAME: space-shooter-pro-redux
          ITCH_USER: Arynoyn
          PACKAGE: build-StandaloneOSX.zip
          VERSION: ${{ steps.download-macos.outputs.version }}
  
  release_linux_to_itch:
    name: Release Linux (64-bit) to itch.io
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'Linux'))
    steps:
      - name: download Linux
        id: download-linux
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: "latest"
          file: build-StandaloneLinux64.zip
          token: "${{ secrets.GH_CREDENTIALS }}"
      - name: deploy to itch.io (Linux)
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: linux
          ITCH_GAME: space-shooter-pro-redux
          ITCH_USER: Arynoyn
          PACKAGE: build-StandaloneLinux64.zip
          VERSION: ${{ steps.download-linux.outputs.version }}

  # release_Android_to_itch:
  #   name: Release Android to itch.io
  #   runs-on: ubuntu-latest
  #   needs: buildWithLinux
  #   if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'Android'))
  #   steps:
  #     - name: download Android
  #       id: download-android
  #       uses: dsaltares/fetch-gh-release-asset@master
  #       with:
  #         version: "latest"
  #         file: build-Android.zip
  #         token: "${{ secrets.GH_CREDENTIALS }}"
  #     - name: deploy to itch.io (Android)
  #       uses: josephbmanley/butler-publish-itchio-action@master
  #       env:
  #         BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
  #         CHANNEL: html
  #         ITCH_GAME: space-shooter-pro-redux
  #         ITCH_USER: Arynoyn
  #         PACKAGE: build-Android.zip
  #         VERSION: ${{ steps.download-android.outputs.version }}

  # release_html_to_itch:
  #   name: Release HTML5 to itch.io
  #   runs-on: ubuntu-latest
  #   needs: buildWithLinux
  #   if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'html'))
  #   steps:
  #     - name: download HTML5
  #       id: download-html
  #       uses: dsaltares/fetch-gh-release-asset@master
  #       with:
  #         version: "latest"
  #         file: build-html.zip
  #         token: "${{ secrets.GH_CREDENTIALS }}"
  #     - name: deploy to itch.io (HTML5)
  #       uses: josephbmanley/butler-publish-itchio-action@master
  #       env:
  #         BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
  #         CHANNEL: html
  #         ITCH_GAME: space-shooter-pro-redux
  #         ITCH_USER: Arynoyn
  #         PACKAGE: build-html.zip
  #         VERSION: ${{ steps.download-html.outputs.version }}

  #-----------------------------------------------------------------------
  # Deploy to Google Play Store
  #-----------------------------------------------------------------------

  # releaseToGooglePlay:
  #   name: Release to the Google Play Store
  #   runs-on: ubuntu-latest
  #   needs: buildWithLinux
  #   if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'android'))
  #   env:
  #     GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
  #     GOOGLE_PLAY_KEY_FILE_PATH: ${{ format('{0}/fastlane/api-finoldigital.json', github.workspace) }}
  #     ANDROID_BUILD_FILE_PATH: ${{ format('{0}/build/Android/Android.aab', github.workspace) }}
  #     ANDROID_PACKAGE_NAME: com.finoldigital.cardgamesim
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #     - name: Download Android Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: cgs-Android
  #         path: build/Android
  #     - name: Write to Changelog
  #       if: github.event.action == 'published'
  #       env:
  #         RELEASE_NOTES: ${{ github.event.release.body }}
  #       run: echo "$RELEASE_NOTES" > fastlane/metadata/android/en-US/changelogs/default.txt
  #     - name: Add Authentication
  #       run: echo "$GOOGLE_PLAY_KEY_FILE" > $GOOGLE_PLAY_KEY_FILE_PATH
  #     - name: Install Fastlane
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: 2.7.2
  #         bundler-cache: true
  #     - name: Upload to Google Play
  #       uses: maierj/fastlane-action@v2.0.1
  #       with:
  #         lane: 'android playprod'

  #-----------------------------------------------------------------------
  # Deploy to iOS Store
  #-----------------------------------------------------------------------

  # releaseToAppStore:
  #   name: Release to the App Store
  #   runs-on: macos-latest
  #   needs: buildWithLinux
  #   if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'ios'))
  #   env:
  #     APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
  #     APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
  #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  #     APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
  #     MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  #     MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
  #     MATCH_URL: ${{ secrets.MATCH_URL }}
  #     APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
  #     APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
  #     APPSTORE_P8: ${{ secrets. APPSTORE_P8 }}
  #     APPSTORE_P8_PATH: ${{ format('{0}/fastlane/p8.json', github.workspace) }}
  #     IOS_APP_ID: com.finoldigital.CardGameSim
  #     IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
  #     PROJECT_NAME: Card Game Simulator
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #     - name: Download iOS Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: cgs-iOS
  #         path: build/iOS
  #     - name: Write to Changelog
  #       if: github.event.action == 'published'
  #       env:
  #         RELEASE_NOTES: ${{ github.event.release.body }}
  #       run: echo "$RELEASE_NOTES" > fastlane/metadata/android/en-US/changelogs/default.txt
  #     - name: Fix File Permissions, Code-Sign, and Get Release Notes
  #       id: terminal
  #       run: |
  #         find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
  #         find $IOS_BUILD_PATH -type f -iname "usymtool" -exec chmod +x {} \;
  #         echo "$APPSTORE_P8" > $APPSTORE_P8_PATH
  #         export notes="$(cat fastlane/metadata/android/en-US/changelogs/default.txt)"
  #         notes="${notes//'%'/'%25'}"
  #         notes="${notes//$'\n'/'%0A'}"
  #         notes="${notes//$'\r'/'%0D'}"
  #         echo "$notes"
  #         echo "::set-output name=RELEASE_NOTES::$notes"
  #     - name: Install Fastlane
  #       run: bundle install
  #     - name: Upload to the App Store
  #       uses: maierj/fastlane-action@v2.0.1
  #       env:
  #         RELEASE_NOTES: ${{ steps.terminal.outputs.RELEASE_NOTES }}
  #         USYM_UPLOAD_AUTH_TOKEN: ${{ secrets.USYM_UPLOAD_AUTH_TOKEN }}
  #       with:
  #         lane: 'ios release'

  #-----------------------------------------------------------------------
  # Deploy to MacOS Store
  #-----------------------------------------------------------------------

  # releaseToMacAppStore:
  #   name: Release to the Mac App Store
  #   runs-on: macos-latest
  #   needs: buildWithLinux
  #   if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'mac'))
  #   env:
  #     APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
  #     APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
  #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  #     APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
  #     MAC_APPLICATION_CERTIFICATE: ${{ secrets.MAC_APPLICATION_CERTIFICATE }}
  #     MAC_APPLICATION_PASSWORD: ${{ secrets.MAC_APPLICATION_PASSWORD }}
  #     MAC_INSTALLER_CERTIFICATE: ${{ secrets.MAC_INSTALLER_CERTIFICATE }}
  #     MAC_INSTALLER_PASSWORD: ${{ secrets.MAC_INSTALLER_PASSWORD }}
  #     APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
  #     APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
  #     APPSTORE_P8: ${{ secrets. APPSTORE_P8 }}
  #     APPSTORE_P8_PATH: ${{ format('{0}/fastlane/p8.json', github.workspace) }}
  #     MAC_APP_ID: com.finoldigital.CardGameSimulator
  #     MAC_BUILD_PATH: ${{ format('{0}/build/StandaloneOSX', github.workspace) }}
  #     PROJECT_NAME: Card Game Simulator
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #     - name: Download StandaloneOSX Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: cgs-StandaloneOSX
  #         path: build/StandaloneOSX
  #     - name: Write to Changelog
  #       if: github.event.action == 'published'
  #       env:
  #         RELEASE_NOTES: ${{ github.event.release.body }}
  #       run: echo "$RELEASE_NOTES" > fastlane/metadata/android/en-US/changelogs/default.txt
  #     - name: Install Fastlane
  #       run: bundle install
  #     - name: Fix version for StandaloneOSX
  #       uses: maierj/fastlane-action@v2.0.1
  #       with:
  #         lane: 'fixversion'
  #     - name: Fix File Permissions, Code-Sign, and Get Release Notes
  #       id: terminal
  #       run: |
  #         find $MAC_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
  #         chmod +x fastlane/sign-osx-build.sh
  #         ./fastlane/sign-osx-build.sh
  #         echo "$APPSTORE_P8" > $APPSTORE_P8_PATH
  #         export notes="$(cat fastlane/metadata/android/en-US/changelogs/default.txt)"
  #         notes="${notes//'%'/'%25'}"
  #         notes="${notes//$'\n'/'%0A'}"
  #         notes="${notes//$'\r'/'%0D'}"
  #         echo "$notes"
  #         echo "::set-output name=RELEASE_NOTES::$notes"
  #     - name: Upload to the Mac App Store
  #       uses: maierj/fastlane-action@v2.0.1
  #       env:
  #         RELEASE_NOTES: ${{ steps.terminal.outputs.RELEASE_NOTES }}
  #       with:
  #         lane: 'mac macupload'

  #-----------------------------------------------------------------------
  # Deploy to Microsoft Store
  #-----------------------------------------------------------------------

  # releaseToMicrosoftStore:
  #   name: Release to the Microsoft Store
  #   runs-on: windows-latest
  #   needs: buildWithWindows
  #   if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'windows'))
  #   env:
  #     Wap_Project_Directory: build\WSAPlayer\Card Game Simulator
  #     SigningCertificate: Card Game Simulator_StoreKey.pfx
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #     - name: Download WSAPlayer Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: cgs-WSAPlayer
  #         path: build/WSAPlayer
  #     - name: Setup Unity IL2CPP
  #       uses: kuler90/setup-unity@v1
  #       with:
  #         unity-modules: windows-il2cpp
  #     - name: Setup Unity UWP
  #       uses: kuler90/setup-unity@v1
  #       with:
  #         unity-modules: universal-windows-platform
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - name: Setup MSBuild
  #       uses: microsoft/setup-msbuild@v1
  #     - name: Restore the Wpf application to populate the obj folder
  #       run: msbuild $env:SolutionPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
  #       env:
  #         SolutionPath: build\WSAPlayer\Card Game Simulator.sln
  #         Configuration: Master
  #         RuntimeIdentifier: win-x64
  #     - name: Decode the Pfx
  #       run: |
  #         $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.MICROSOFT_STORE_PFX_FILE }}")
  #         $currentDirectory = Get-Location
  #         $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
  #         [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
  #     - name: Build the .appxupload
  #       run: msbuild $env:SolutionPath /p:Configuration=$env:Configuration /p:Platform=$env:TargetPlatform /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle
  #       env:
  #         SolutionPath: build\WSAPlayer\Card Game Simulator.sln
  #         Configuration: Master
  #         TargetPlatform: x64
  #         BuildMode: StoreUpload
  #         AppxBundle: Always
  #     - name: Remove the .pfx
  #       run: Remove-Item -path $env:Wap_Project_Directory\$env:SigningCertificate
  #     - name: Upload the .appxupload
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: cgs.appxupload
  #         path: build/WSAPlayer/AppPackages/Card Game Simulator/*.appxupload
  # TODO: https://github.com/microsoft/StoreBroker#readme